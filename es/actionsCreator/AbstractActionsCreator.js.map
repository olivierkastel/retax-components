{"version":3,"sources":["src/actionsCreator/AbstractActionsCreator.js","src/actionsCreator/AbstractActionsCreator.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","injectable","METADATA_KEYS","AbstractActionsCreator","config","apis","actionsCreators","methodNames","getMetadata","RETAX_ACTIONS","reduce","res","name","assign","bind"],"mappings":";;;;;;;;AAAA,IAAIA,aAAc,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,QAAIC,IAAIC,UAAUC,MAAlB;AAAA,QAA0BC,IAAIH,IAAI,CAAJ,GAAQH,MAAR,GAAiBE,SAAS,IAAT,GAAgBA,OAAOK,OAAOC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,QAA2HO,CAA3H;AACA,QAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,QAAQC,QAAf,KAA4B,UAA/D,EAA2EL,IAAII,QAAQC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,IAAIb,WAAWM,MAAX,GAAoB,CAAjC,EAAoCO,KAAK,CAAzC,EAA4CA,GAA5C;AAAiD,YAAIH,IAAIV,WAAWa,CAAX,CAAR,EAAuBN,IAAI,CAACH,IAAI,CAAJ,GAAQM,EAAEH,CAAF,CAAR,GAAeH,IAAI,CAAJ,GAAQM,EAAET,MAAF,EAAUC,GAAV,EAAeK,CAAf,CAAR,GAA4BG,EAAET,MAAF,EAAUC,GAAV,CAA5C,KAA+DK,CAAnE;AAAxE,KACL,OAAOH,IAAI,CAAJ,IAASG,CAAT,IAAcC,OAAOM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;AAMA,IAAIQ,aAAc,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1D,QAAI,QAAON,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,QAAQO,QAAf,KAA4B,UAA/D,EAA2E,OAAOP,QAAQO,QAAR,CAAiBF,CAAjB,EAAoBC,CAApB,CAAP;AAC9E,CAFD;AAGA,SCTSE,UDST,QCT2B,WDS3B;AACA,SCDSC,aDCT,QCD8B,cDC9B;ACEA,IAAAC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,kCAImBC,MAJnB,EAIuD;AACnD,iBAAKC,IAAL,GAAYD,OAAOC,IAAnB;AACA,iBAAKC,eAAL,GAAuBF,OAAOE,eAA9B;AACD;AAED;;;;AATF;AAAA;AAAA,kCAYe;AAAA;;AACX,gBAAMC,cAAwBd,QAAQe,WAAR,CAAoBN,cAAcO,aAAlC,EAAiD,IAAjD,KAA0D,EAAxF;AACA,mBAAOF,YAAYG,MAAZ,CAAmB,UAACC,GAAD,EAAMC,IAAN;AAAA,uBACxBtB,OAAOuB,MAAP,CAAcF,GAAd,sBAAsBC,IAAtB,EAA6B,MAAKA,IAAL,EAAWE,IAAX,OAA7B,EADwB;AAAA,aAAnB,EAEJ,EAFI,CAAP;AAGD;AAjBH;;AAAA;AAAA,GAAA;AADAX,yBAAAtB,WAAA,CAACoB,YAAD,EDeIJ,WAAW,mBAAX,EAAgC,EAAhC,CCfJ,CAAA,EDgBGM,sBChBH,CAAA;AAqBA,eAAeA,sBAAf","file":"AbstractActionsCreator.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { injectable } from 'inversify';\nimport { METADATA_KEYS } from '../annotator';\nlet AbstractActionsCreator = class AbstractActionsCreator {\n    configure(config) {\n        this.apis = config.apis;\n        this.actionsCreators = config.actionsCreators;\n    }\n    /**\n     * We are loosing typing here. We should find a better solution\n     */\n    export() {\n        const methodNames = Reflect.getMetadata(METADATA_KEYS.RETAX_ACTIONS, this) || [];\n        return methodNames.reduce((res, name) => (Object.assign(res, { [name]: this[name].bind(this) })), {});\n    }\n};\nAbstractActionsCreator = __decorate([\n    injectable(), \n    __metadata('design:paramtypes', [])\n], AbstractActionsCreator);\nexport default AbstractActionsCreator;\n","import { injectable } from 'inversify';\n\nimport { IActionsCreator, IExportReturn } from './interfaces';\n\nimport {\n  IActionsCreatorServiceConfig,\n  IUserServiceMap,\n} from 'retax-core';\n\nimport { METADATA_KEYS } from '../annotator';\n\n@injectable()\nabstract class AbstractActionsCreator implements IActionsCreator {\n  public apis: IUserServiceMap;\n  public actionsCreators: IUserServiceMap;\n\n  public configure(config: IActionsCreatorServiceConfig): void {\n    this.apis = config.apis;\n    this.actionsCreators = config.actionsCreators;\n  }\n\n  /**\n   * We are loosing typing here. We should find a better solution\n   */\n  public export(): IExportReturn {\n    const methodNames: string[] = Reflect.getMetadata(METADATA_KEYS.RETAX_ACTIONS, this) || [];\n    return methodNames.reduce((res, name) => (\n      Object.assign(res, { [name]: this[name].bind(this) })\n    ), {} as IExportReturn);\n  }\n}\n\nexport default AbstractActionsCreator;\n"]}